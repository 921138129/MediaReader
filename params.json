{"name":"Media Reader","tagline":"Reads audio/video data from files, cameras, microphone, and generic media sources","body":"[![Build status](https://ci.appveyor.com/api/projects/status/ix4eud7pf2w9p0gt?svg=true)](https://ci.appveyor.com/project/mmaitre314/mediacapturereader)\r\n[![NuGet package](http://mmaitre314.github.io/images/nuget.png)](https://www.nuget.org/packages/MMaitre.MediaCaptureReader/)\r\n\r\n`MediaReader` reads audio/video data from files (`StorageFile`, `IRandomAccessStream`, path), cameras and microphone (`MediaCapture`), and generic sources (`IMediaSource`). Universal Store apps targeting either Windows or Windows Phone are supported. A NuGet package is available [here](http://www.nuget.org/packages/MMaitre.MediaCaptureReader/).\r\n\r\n`MediaReader` allows for instance reading video frames from an MP4 file and saving them as a series of JPEG images:\r\n\r\n![Photos](http://mmaitre314.github.io/images/CS_W_MediaReader_SaveAllFrameAsJpeg.JPG)\r\n\r\n```c#\r\nusing (var reader = await MediaReader.CreateFromPathAsync(\"ms-appx:///car.mp4\"))\r\n{\r\n    while (true)\r\n    {\r\n        using (var result = await reader.VideoStream.ReadAsync())\r\n        {\r\n            if (result.EndOfStream || result.Error)\r\n            {\r\n                break;\r\n            }\r\n\r\n            var sample = (MediaSample2D)result.Sample;\r\n            if (sample == null)\r\n            {\r\n                continue;\r\n            }\r\n\r\n            var file = await folder.CreateFileAsync(((int)sample.Timestamp.TotalMilliseconds).ToString(\"D6\") + \".jpg\");\r\n            await sample.SaveToFileAsync(file, ImageCompression.Jpeg);\r\n        }\r\n    }\r\n}\r\n```\r\n\r\n## Creating MediaReader\r\n\r\n### From files\r\n\r\nThree static methods are available to create `MediaReader` from `StorageFile`, `IRandomAccessStream`, and path: `CreateFromFileAsync()`, `CreateFromStreamAsync()`, and `CreateFromPathAsync()` respectively. `CreateFromPathAsync` in particular is useful to read files in the app package using the `ms-appx` scheme:\r\n\r\n```c#\r\nvar reader = await MediaReader.CreateFromPathAsync(\"ms-appx:///car.mp4\");\r\n```\r\n\r\n### From cameras and microphones\r\n\r\nData from cameras and microphones is read by creating `MediaCapture` and passing it to `MediaReader.CreateFromMediaCaptureAsync()`:\r\n\r\n```c#\r\nvar capture = new MediaCapture();\r\nawait capture.InitializeAsync();\r\n\r\nvar reader = await MediaReader.CreateFromMediaCaptureAsync(capture);\r\n```\r\n\r\nA `SelectVideoDeviceAsync()` extension method is provided on `MediaCaptureInitializationSettings` to simplify selecting the back and front cameras:\r\n\r\n```c#\r\nusing MediaCaptureReaderExtensions;\r\n\r\nvar settings = new MediaCaptureInitializationSettings\r\n{\r\n    // Video-only capture\r\n    StreamingCaptureMode = StreamingCaptureMode.Video\r\n};\r\nif (!await settings.SelectVideoDeviceAsync(VideoDeviceSelection.BackOrFirst))\r\n{\r\n    // No camera\r\n    return;\r\n}\r\n\r\nvar capture = new MediaCapture();\r\nawait _capture.InitializeAsync(settings);\r\n```\r\n\r\n`SelectVideoDeviceAsync()` returns `false` if no camera is present.\r\n\r\n### From generic media sources\r\n\r\n`MediaReader` can also read data from `IMediaSource` using `CreateFromMediaSourceAsync()`. This can be used in conjunction with the `HttpMjpegCaptureSource` class in the same package, a media source streaming MJPEG videos from IP cameras:\r\n\r\n```c#\r\nvar source = await HttpMjpegCaptureSource.CreateFromUriAsync(\"http://216.123.238.208/axis-cgi/mjpg/video.cgi?camera&resolution=640x480\");\r\nvar reader = await MediaReader.CreateFromMediaSourceAsync(source.Source);\r\n```\r\n\r\n![Airport](http://mmaitre314.github.io/images/CS_W_MediaReader_IpCam.jpg)\r\n\r\n## Reading audio/video data\r\n\r\n### Selecting the stream format\r\n\r\nThe `AudioInitialization` and `VideoInitialization` enumerations control data processing in `MediaReader`. They can be used for instance to read the video data as Bgra8 while ignoring the audio data:\r\n\r\n```c#\r\nvar reader = await MediaReader.CreateFromFileAsync(file, AudioInitialization.Deselected, VideoInitialization.Bgra8);\r\n```\r\n\r\nAudio streams can be initialized as `Pcm`, `PassThrough`, or `Deselected`, while video streams can be initialized as `Nv12`, `Bgra8`, `PassThrough`, or `Deselected`. The defaults are `Nv12` and `Pcm`. In `PassThrough` mode the data is provided in the format it is stored in the file, which is typically compressed (say H.264 and AAC).\r\n\r\n### Reading data samples\r\n\r\nThe `AudioStream` and `VideoStream` properties on `MediaReader` provide `ReadAsync()` methods to read samples from the first audio and video streams in the file. The properties are null if the file has no audio or no video data. An `AllStreams` property also gives access to all the available streams.\r\n\r\n```c#\r\nusing (var result = await _mediaReader.VideoStream.ReadAsync())\r\n```\r\n\r\nThe `ReadAsync()` methods return `MediaReaderReadResult` objects which provide information about the stream state (`EndOfStream`, `Error`, etc. properties) and give out the data just read (`Sample` property). The `Sample` property is of type `IMediaSample`. As-is it gives access to the sample time and duration. It can also be cast to `MediaSample2D` when reading uncompressed video and `MediaSample1D` when reading compressed video or either compressed or uncompressed audio. The `LockBuffer()` methods on those two classes give access to the sample data.\r\n\r\n```c#\r\nusing (var reader = await MediaReader.CreateFromPathAsync(\"ms-appx:///Recording.m4a\"))\r\n{\r\n    while (true)\r\n    {\r\n        using (var result = await reader.AudioStream.ReadAsync())\r\n        {\r\n            if (result.EndOfStream || result.Error)\r\n            {\r\n                break;\r\n            }\r\n\r\n            var sample = (MediaSample1D)result.Sample;\r\n            if (sample == null)\r\n            {\r\n                continue;\r\n            }\r\n\r\n            // Use audio data here\r\n        }\r\n    }\r\n}\r\n```\r\n\r\n## Processing 2D samples\r\n\r\n`ImageProcessor` provides methods to convert the format/width/height of 2D samples and rotate them:\r\n\r\n```c#\r\nvar processor = new ImageProcessor();\r\n\r\nvar sample1 = new MediaSample2D(MediaSample2DFormat.Nv12, 320, 240);\r\nvar sample2 = processor.Rotate(sample1, BitmapRotation.Clockwise90Degrees);\r\nvar sample3 = processor.Convert(sample2, MediaSample2DFormat.Bgra8, 480, 640);\r\n```\r\n\r\n## Saving 2D samples\r\n\r\n`ImageEncoder` encodes 2D samples to JPEG:\r\n\r\n```c#\r\nvar file = await KnownFolders.PicturesLibrary.CreateFileAsync(\"Image.jpg\");\r\nawait ImageEncoder.SaveToFileAsync(sample, file, ImageCompression.Jpeg);\r\n```\r\n\r\nTo simplify that code a bit, extension methods on `MediaSample2D` are also provided:\r\n\r\n```c#\r\nusing MediaCaptureReaderExtensions;\r\n\r\nawait sample.SaveToFileAsync(file, ImageCompression.Jpeg);\r\n```\r\n\r\n## Displaying 2D samples\r\n\r\n`ImagePresenter` displays 2D samples in XAML using either `SurfaceImageSource`\r\n\r\n```c#\r\nvar image = new SurfaceImageSource((int)previewProps.Width, (int)previewProps.Height);\r\nvar imagePresenter = ImagePresenter.CreateFromSurfaceImageSource(image, graphicsDevice);\r\nvar imagePresenter.Present(sample);\r\n```\r\n\r\nor `SwapChainPanel`\r\n\r\n```c#\r\nvar swapChainPresenter = ImagePresenter.CreateFromSwapChainPanel(\r\n    SwapChainPreview,\r\n    graphicsDevice,\r\n    (int)previewProps.Width,\r\n    (int)previewProps.Height\r\n    );\r\nswapChainPresenter.Present(sample);\r\n```\r\n\r\n## Examples\r\n\r\n### Detecting QR codes using [ZXing.Net](http://www.nuget.org/packages/ZXing.Net/)\r\n\r\n```c#\r\nvar barcodeReader = new BarcodeReader\r\n{\r\n    PossibleFormats = new BarcodeFormat[] { BarcodeFormat.QR_CODE }\r\n};\r\n\r\nusing (var mediaReader = await MediaReader.CreateFromPathAsync(\"ms-appx:///QR_12345678.mp4\", AudioInitialization.Deselected, VideoInitialization.Bgra8))\r\nusing (var mediaResult = await mediaReader.VideoStream.ReadAsync())\r\n{\r\n    var sample = (MediaSample2D)mediaResult.Sample;\r\n\r\n    using (var buffer = sample.LockBuffer(BufferAccessMode.Read))\r\n    {\r\n        var barcodeResult = barcodeReader.Decode(\r\n            buffer.Planes[0].Buffer.ToArray(),\r\n            buffer.Width,\r\n            buffer.Height,\r\n            BitmapFormat.BGR32\r\n            );\r\n\r\n        ...\r\n    }\r\n}\r\n```\r\n\r\n### Applying effects using the [Lumia Imaging SDK](http://www.nuget.org/packages/LumiaImagingSDK/)\r\n\r\n```c#\r\nusing (var mediaReader = await MediaReader.CreateFromPathAsync(\"ms-appx:///car.mp4\", AudioInitialization.Deselected, VideoInitialization.Nv12))\r\nusing (var mediaResult = await mediaReader.VideoStream.ReadAsync())\r\n{\r\n    var inputSample = (MediaSample2D)mediaResult.Sample;\r\n\r\n    using (var outputSample = new MediaSample2D(MediaSample2DFormat.Nv12, inputSample.Width, inputSample.Height))\r\n    using (var inputBuffer = inputSample.LockBuffer(BufferAccessMode.Read))\r\n    using (var outputBuffer = outputSample.LockBuffer(BufferAccessMode.Write))\r\n    {\r\n        // Wrap MediaBuffer2D in Bitmap\r\n        var inputBitmap = new Bitmap(\r\n            new Size(inputSample.Width, inputSample.Height), \r\n            ColorMode.Yuv420Sp,\r\n            new uint[] { inputBuffer.Planes[0].Pitch, inputBuffer.Planes[1].Pitch },\r\n            new IBuffer[] { inputBuffer.Planes[0].Buffer, inputBuffer.Planes[1].Buffer }\r\n            );\r\n        var outputBitmap = new Bitmap(\r\n            new Size(inputSample.Width, inputSample.Height),\r\n            ColorMode.Yuv420Sp,\r\n            new uint[] { outputBuffer.Planes[0].Pitch, outputBuffer.Planes[1].Pitch },\r\n            new IBuffer[] { outputBuffer.Planes[0].Buffer, outputBuffer.Planes[1].Buffer }\r\n            );\r\n\r\n        // Apply effect\r\n        var effect = new FilterEffect();\r\n        effect.Filters = new IFilter[] { new WatercolorFilter() };\r\n        effect.Source = new BitmapImageSource(inputBitmap);\r\n        var renderer = new BitmapRenderer(effect, outputBitmap);\r\n        await renderer.RenderAsync();\r\n    }\r\n}\r\n```\r\n\r\n### Accessing pixel data\r\n\r\nFor efficiency, a `GetData()` extension method is added on `IBuffer`. `GetData()` returns an 'unsafe' `byte*` pointing to the `IBuffer` data. This requires methods calling `GetData()` to be marked using the `unsafe` keyword and to check the 'Allow unsafe code' checkbox in the project build properties.\r\n\r\nThe following code snippet reads RGB values and doubles them:\r\n\r\n```c#\r\nusing MediaCaptureReaderExtensions;\r\n\r\nprivate unsafe void ProcessSample(MediaSample2D sample)\r\n{\r\n    using (var buffer = sample.LockBuffer(BufferAccessMode.ReadWrite))\r\n    {\r\n        int width = buffer.Width;\r\n        int height = buffer.Height;\r\n        int pitch = (int)buffer.Planes[0].Pitch;\r\n        byte* data = buffer.Planes[0].Buffer.GetData();\r\n\r\n        for (int i = 0; i < height; i++)\r\n        {\r\n            for (int j = 0; j < width; j++)\r\n            {\r\n                int pos = i * pitch + 4 * j;\r\n                data[pos + 0] = (byte)Math.Min(255, 2 * data[pos + 0]); // B\r\n                data[pos + 1] = (byte)Math.Min(255, 2 * data[pos + 1]); // G\r\n                data[pos + 2] = (byte)Math.Min(255, 2 * data[pos + 2]); // R\r\n            }\r\n        }\r\n    }\r\n}\r\n```\r\n\r\n### Streaming MJPEG videos from IP cameras\r\n\r\nThe `HttpMjpegCaptureSource` class streams MJPEG video from IP cameras. It can for instance be passed to XAML's `<MediaElement>` to preview the video stream:\r\n\r\n```xml\r\n    <MediaElement Name=\"VideoPreview\" AutoPlay=\"True\" RealTimePlayback=\"True\" />\r\n```\r\n\r\n```c#\r\nvar source = await HttpMjpegCaptureSource.CreateFromUriAsync(\"http://216.123.238.208/axis-cgi/mjpg/video.cgi?camera&resolution=640x480\");\r\nVideoPreview.SetMediaStreamSource(source.Source);\r\n```\r\n\r\n## CaptureReader (deprecated)\r\n\r\n`CaptureReader` reads audio/video samples from `MediaCapture`. The following code snippet reads a video sample in Bgra8 format from the default camera:\r\n\r\n```c#\r\n# Create MediaCapture\r\nvar capture = new MediaCapture();\r\nawait capture.InitializeAsync();\r\n\r\n# Create a Bgra8 video format matching the camera resolution and framerate\r\nvar previewProps = (VideoEncodingProperties)capture.VideoDeviceController.GetMediaStreamProperties(MediaStreamType.VideoPreview);\r\nvar readerProps = VideoEncodingProperties.CreateUncompressed(MediaEncodingSubtypes.Bgra8, previewProps.Width, previewProps.Height);\r\nreaderProps.FrameRate.Numerator = previewProps.FrameRate.Numerator;\r\nreaderProps.FrameRate.Denominator = previewProps.FrameRate.Denominator;\r\n\r\n# Create CaptureReader and get a video sample\r\nvar captureReader = await CaptureReader.CreateAsync(\r\n    capture, \r\n    new MediaEncodingProfile\r\n    {\r\n        Video = readerProps\r\n    });\r\nMediaSample sample = await captureReader.GetVideoSampleAsync();\r\n```\r\n","google":"UA-55657833-1","note":"Don't delete this file! It's used internally to help with page regeneration."}